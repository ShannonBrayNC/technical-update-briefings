*** a/tools/ppt_builder/generate_deck.py
--- b/tools/ppt_builder/generate_deck.py
@@
-def _inches(x: Optional[float]) -> int:
-    """Return EMU from inches, accepting None by coercing to 0.0."""
-    return _inches(0.0 if x is None else float(x))
+def _inches(x: Optional[float]) -> int:
+    """Return EMU from inches, accepting None by coercing to 0.0."""
+    return int(round((0.0 if x is None else float(x)) * EMU_PER_INCH))
 
 def _pt(x: Optional[float]) -> int:
     """Return EMU from points, accepting None by coercing to 0.0."""
@@
-def _mk_item(**kwargs) -> Item:
-    filtered = {k: v for k, v in kwargs.items() if k in _allowed_fields}
-    return Item(**filtered)  # type: ignore[call-arg]
+def _mk_item(**kwargs) -> Item:
+    """Filter kwargs against Item dataclass fields and construct an Item."""
+    valid = {f.name for f in _dc_fields(Item)}
+    filtered = {k: v for k, v in kwargs.items() if k in valid}
+    return Item(**filtered)
@@
-def add_cover_slide(
-    prs,
-    assets: dict,
-    cover_title: str | None,
-    cover_dates: str | None,
-    logo1: str | None,
-    logo2: str | None,
-):
-    slide = prs.slides.add_slide(prs.slide_layouts[6])  # blank
-    add_bg(slide, prs, assets.get("cover"))
-
-
-
-    # Dates
-    add_text_box(
-        slide,
-        cover_dates or "",
-        left_in=left,
-        top_in=top + height + 0.2,
-        width_in=width,
-        height_in=0.6,
-        size_pt=28,
-        bold=False,
-        color=WHITE,
-    )
-
-    # Logos bottom-left/right
-    add_picture_safe(slide, path_if_exists(logo1), left_in=0.4, top_in=6.6, height_in=0.6)
-    add_picture_safe(slide, path_if_exists(logo2), left_in=sw_in - 2.2, top_in=6.5, width_in=1.8)
+def add_cover_slide(
+    prs,
+    assets: dict,
+    cover_title: str | None,
+    cover_dates: str | None,
+    logo1: str | None,
+    logo2: str | None,
+):
+    slide = prs.slides.add_slide(prs.slide_layouts[6])  # blank
+    add_bg(slide, prs, assets.get("cover"))
+
+    sw_in = emu_to_inches(prs.slide_width)
+    sh_in = emu_to_inches(prs.slide_height)
+
+    # Title
+    add_title_box(
+        slide,
+        cover_title or "",
+        left_in=PAGE_MARGIN_IN,
+        top_in=2.5,
+        width_in=sw_in - 2 * PAGE_MARGIN_IN,
+        height_in=1.5,
+        font_size_pt=56,
+        color=GOLD,
+    )
+
+    # Dates
+    add_text_box(
+        slide,
+        cover_dates or "",
+        left_in=PAGE_MARGIN_IN,
+        top_in=4.2,
+        width_in=sw_in - 2 * PAGE_MARGIN_IN,
+        height_in=0.6,
+        size_pt=28,
+        bold=False,
+        color=WHITE,
+    )
+
+    # Logos bottom-left/right
+    add_picture_safe(slide, path_if_exists(logo1), left_in=0.4, top_in=sh_in - 1.0, height_in=0.6)
+    add_picture_safe(slide, path_if_exists(logo2), left_in=sw_in - 2.2, top_in=sh_in - 1.1, width_in=1.8)
@@
-def add_separator_slide(prs, assets: dict, title: str):
+def add_separator_slide(prs, assets: dict, title: str, subtitle: str | None = None):
     slide = prs.slides.add_slide(prs.slide_layouts[6])
     add_bg(slide, prs, assets.get("separator"))
     sw_in = emu_to_inches(prs.slide_width)
@@
         color=GOLD,
     )
+
+    if subtitle:
+        add_text_box(
+            slide,
+            subtitle,
+            left_in=PAGE_MARGIN_IN,
+            top_in=5.0,
+            width_in=sw_in - 2 * PAGE_MARGIN_IN,
+            height_in=0.6,
+            size_pt=28,
+            bold=False,
+            color=WHITE,
+            align=PP_ALIGN.CENTER,
+        )
