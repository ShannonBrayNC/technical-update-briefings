from __future__ import annotations

import argparse
import os
import re
import time
from dataclasses import dataclass
from datetime import datetime
from typing import Any

from bs4 import BeautifulSoup
from bs4.element import NavigableString, Tag
from pptx import Presentation
from pptx.dml.color import RGBColor
from pptx.enum.shapes import MSO_SHAPE
from pptx.enum.text import MSO_AUTO_SIZE, PP_ALIGN
from pptx.util import Inches, Pt

# ----------------------------
# Constants / theme
# ----------------------------
EMU_PER_INCH = 914400

GOLD = RGBColor(212, 175, 55)
WHITE = RGBColor(255, 255, 255)
BLACK = RGBColor(0, 0, 0)
DARK_PURPLE = RGBColor(40, 17, 63)  # rail
MID_PURPLE = RGBColor(70, 35, 100)
LIGHT_PURPLE = RGBColor(95, 60, 135)

DEFAULT_RAIL_WIDTH_IN = 3.5
PAGE_MARGIN_IN = 0.6


# ----------------------------
# Utils
# ----------------------------
def emu_to_inches(emu_val: int) -> float:
    return float(emu_val) / EMU_PER_INCH


def _to_text(val: Any) -> str:
    """Turn bs4 values (str | list[str] | Tag | NavigableString | None) into text."""
    if val is None:
        return ""
    if isinstance(val, NavigableString,):
        return str(val)
    if isinstance(val, Tag):
        return val.get_text(" ", strip=True)
    from collections.abc import Sequence
    # treat true sequences but not text-like
    if isinstance(val, Sequence) and not isinstance(val, (str, bytes, bytearray)):
         return ", ".join(_to_text(v) for v in val if v is not None)
    return str(val)


def _clean(s: Any) -> str:
    return re.sub(r"\s+", " ", _to_text(s)).strip()


def smart_split_product_title(title: str) -> tuple[str, str]:
    """
    If title is like 'Product: Feature name', return ('Product', 'Feature name').
    Otherwise return ('', title).
    """
    if not title:
        return "", ""
    m = re.match(r"^\s*([^:]{2,50})\s*:\s*(.+)$", title)
    if m:
        prod = m.group(1).strip()
        rest = m.group(2).strip()
        return prod, rest
    return "", title.strip()


def pick_status_icon_key(status_text: str) -> str:
    """
    Choose 'rocket' for GA/Launched/Rolling out; 'magnifier' for Preview/In development/Planned.
    Default to 'magnifier' when uncertain.
    """
    s = (status_text or "").lower()
    if any(k in s for k in ["launched", "rolling out", "rolled out", "general availability", "ga"]):
        return "rocket"
    if any(k in s for k in ["preview", "in development", "planned", "beta"]):
        return "magnifier"
    return "magnifier"


def path_if_exists(p: str | None) -> str | None:
    if p and os.path.exists(p):
        return p
    return None


def add_picture_safe(
    slide,
    image_path: str | None,
    left_in: float,
    top_in: float,
    width_in: float | None = None,
    height_in: float | None = None,
):
    """Add picture if file is present. width_in/height_in are optional (Inches)."""
    if not image_path or not os.path.exists(image_path):
        return None
    left = Inches(left_in)
    top = Inches(top_in)
    if width_in is None and height_in is None:
        return slide.shapes.add_picture(image_path, left, top)
    if width_in is not None and height_in is None:
        return slide.shapes.add_picture(image_path, left, top, width=Inches(width_in))
    if width_in is None and height_in is not None:
        return slide.shapes.add_picture(image_path, left, top, height=Inches(height_in))
    return slide.shapes.add_picture(
        image_path, left, top, width=Inches(width_in), height=Inches(height_in)
    )


def add_title_box(
    slide,
    text: str,
    *,
    left_in: float,
    top_in: float,
    width_in: float,
    height_in: float,
    font_size_pt: int = 60,
    bold: bool = True,
    color: RGBColor = GOLD,
    align=PP_ALIGN.LEFT,
):
    """Title that wraps & shrinks to fit."""
    box = slide.shapes.add_textbox(
        Inches(left_in), Inches(top_in), Inches(width_in), Inches(height_in)
    )
    tf = box.text_frame
    tf.clear()
    tf.word_wrap = True
    tf.auto_size = MSO_AUTO_SIZE.TEXT_TO_FIT_SHAPE
    tf.margin_left = Inches(0.05)
    tf.margin_right = Inches(0.05)
    tf.margin_top = Inches(0.02)
    tf.margin_bottom = Inches(0.02)
    p = tf.paragraphs[0]
    p.alignment = align
    r = p.add_run()
    r.text = text or ""
    f = r.font
    f.size = Pt(font_size_pt)
    f.bold = bold
    f.color.rgb = color
    return box


def add_text_box(
    slide,
    text: str,
    *,
    left_in: float,
    top_in: float,
    width_in: float,
    height_in: float,
    size_pt: int = 18,
    bold: bool = False,
    color: RGBColor = WHITE,
    align=PP_ALIGN.LEFT,
):
    box = slide.shapes.add_textbox(
        Inches(left_in), Inches(top_in), Inches(width_in), Inches(height_in)
    )
    tf = box.text_frame
    tf.clear()
    tf.word_wrap = True
    p = tf.paragraphs[0]
    p.alignment = align
    r = p.add_run()
    r.text = text or ""
    f = r.font
    f.size = Pt(size_pt)
    f.bold = bold
    f.color.rgb = color
    return box


def add_full_slide_picture(slide, prs, image_path: str | None):
    """Stretch a background image to full slide; ignore if missing."""
    if not image_path or not os.path.exists(image_path):
        return
    sw = emu_to_inches(prs.slide_width)
    sh = emu_to_inches(prs.slide_height)
    add_picture_safe(slide, image_path, left_in=0.0, top_in=0.0, width_in=sw, height_in=sh)


def draw_side_rail(
    slide, prs, rail_left_in: float, rail_width_in: float, color: RGBColor = DARK_PURPLE
):
    """Right-side vertical rail rectangle, sized using the Presentation dimensions."""
    slide_h_in = emu_to_inches(prs.slide_height)
    shape = slide.shapes.add_shape(
        MSO_SHAPE.RECTANGLE,
        Inches(rail_left_in),
        Inches(0.0),
        Inches(rail_width_in),
        Inches(slide_h_in),
    )
    fill = shape.fill
    fill.solid()
    fill.fore_color.rgb = color
    shape.line.fill.background()
    return shape


def add_bubble(slide, text: str, left_in: float, top_in: float, width_in: float, height_in: float):
    """Rounded rectangle bubble for product/technology."""
    shape = slide.shapes.add_shape(
        MSO_SHAPE.ROUNDED_RECTANGLE,
        Inches(left_in),
        Inches(top_in),
        Inches(width_in),
        Inches(height_in),
    )
    fill = shape.fill
    fill.solid()
    fill.fore_color.rgb = MID_PURPLE
    shape.line.fill.background()
    tf = shape.text_frame
    tf.clear()
    tf.word_wrap = True
    p = tf.paragraphs[0]
    p.alignment = PP_ALIGN.LEFT
    r = p.add_run()
    r.text = text
    f = r.font
    f.size = Pt(16)
    f.bold = True
    f.color.rgb = WHITE
    return shape


def add_notes(slide, text: str):
    if not text:
        return
    notes = slide.notes_slide.notes_text_frame
    if notes.paragraphs and notes.paragraphs[0].text:
        notes.text += "\n\n" + text
    else:
        notes.text = text


def _safe_save(prs, output_path: str, tries: int = 4, delay_sec: float = 0.6) -> str:
    base, ext = os.path.splitext(output_path)
    for i in range(tries):
        candidate = (
            output_path if i == 0 else f"{base}_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{i}{ext}"
        )
        try:
            prs.save(candidate)
            return candidate
        except PermissionError:
            time.sleep(delay_sec)
            continue
    prs.save(output_path)
    return output_path


# ----------------------------
# Data model
# ----------------------------
@dataclass
class Item:
    title: str
    summary: str
    product: str
    month: str
    status: str
    roadmap_id: str
    url: str
    audience: str  # "Admin", "End user", etc.
    date_str: str
    notes: str


# ----------------------------
# HTML parsing
# ----------------------------
STATUS_WORDS = [
    "Launched",
    "Rolling out",
    "General Availability",
    "GA",
    "Preview",
    "Public Preview",
    "Private Preview",
    "In development",
    "Planned",
    "Beta",
]

AUDIENCE_WORDS = ["Admin", "Administrator", "IT Admin", "End user", "User", "Developer"]


def parse_html_items(paths: list[str]) -> list[Item]:
    items: list[Item] = []
    for p in paths:
        if not os.path.exists(p):
            continue
        with open(p, encoding="utf-8", errors="ignore") as f:
            html = f.read()
        soup = BeautifulSoup(html, "lxml")

        # Try common containers for cards
        candidates: list[Tag] = []
        candidates.extend(soup.select(".card, .roadmap-card, li.roadmap-item, article"))
        if not candidates:
            # fallback: any element that looks like an item with a title link
            candidates.extend(
                [a.parent for a in soup.select("h3 a, h4 a") if isinstance(a.parent, Tag)]
            )

        for card in candidates:
            try:
                # Title + URL
                a = card.select_one("h3 a, h4 a, a.title, .title a")
                title = _clean(a.get_text() if a else _clean(card.get("data-title")))
                href_val: Any = a.get("href") if (a and a.has_attr("href")) else ""
                if isinstance(href_val, list):
                    href_val = href_val[0] if href_val else ""
                elif isinstance(href_val, tuple):
                    href_val = href_val[0] if href_val else ""
                url = _clean(href_val)

                # Summary / description
                summary = ""
                sCand = card.select_one(".summary, .description, p")
                if sCand:
                    summary = _clean(sCand.get_text())

                # Roadmap/Feature ID
                text_all = _clean(card.get_text(" "))
                rid = ""
                m = re.search(r"(?:Feature\s*ID|Roadmap\s*ID)\s*[:#]?\s*(\d{4,7})", text_all, re.I)
                if m:
                    rid = m.group(1)

                # Month / date
                month = ""
                m2 = re.search(
                    r"(Jan(?:uary)?|Feb(?:ruary)?|Mar(?:ch)?|Apr(?:il)?|"
                    r"May|Jun(?:e)?|Jul(?:y)?|Aug(?:ust)?|Sep(?:t(?:ember)?)?|"
                    r"Oct(?:ober)?|Nov(?:ember)?|Dec(?:ember)?)\s+\d{4}",
                    text_all,
                    re.I,
                )
                if m2:
                    month = m2.group(0).title()

                # Status
                status = ""
                for w in STATUS_WORDS:
                    if re.search(rf"\b{re.escape(w)}\b", text_all, re.I):
                        status = w
                        break

                # Audience
                audience = ""
                for w in AUDIENCE_WORDS:
                    if re.search(rf"\b{re.escape(w)}\b", text_all, re.I):
                        audience = "Admin" if "admin" in w.lower() else "End user"
                        break

                # Product (chips/badges) or from title "Product: Feature"
                product = ""
                chip = card.select_one(".product, .technology, .category, .badge")
                if chip:
                    product = _clean(chip.get_text())
                prod_from_title, clean_title = smart_split_product_title(title)
                if prod_from_title and not product:
                    product = prod_from_title
                    title = clean_title

                # Notes (long body) for speaker notes
                # Grab more verbose area if present
                long = ""
                longCand = card.select_one(".details, .notes, .content, .body")
                if longCand:
                    long = _clean(longCand.get_text())
                else:
                    # fallback: use full text minus the summary if present
                    if summary and text_all:
                        long = text_all

                # Date (as text string) — often similar to month but keep both
                date_str = ""
                m3 = re.search(
                    r"\b(?:Updated|Created|Published)\s*[:\-]?\s*([A-Za-z]{3,9}\s+\d{1,2},?\s+\d{4})",
                    text_all,
                    re.I,
                )
                if m3:
                    date_str = m3.group(1)

                items.append(
                    Item(
                        title=title or "(Untitled)",
                        summary=summary or "",
                        product=product or "",
                        month=month or "",
                        status=status or "",
                        roadmap_id=rid or "",
                        url=url or "",
                        audience=audience or "",
                        date_str=date_str or month or "",
                        notes=long or "",
                    )
                )
            except Exception:
                # keep going if a single card is malformed
                continue

    # Deduplicate by (title, roadmap_id) conservatively
    dedup: dict[tuple[str, str], Item] = {}
    for it in items:
        key = (it.title.lower(), it.roadmap_id)
        dedup[key] = it
    return list(dedup.values())


# ----------------------------
# Slide builders
# ----------------------------
def add_bg(slide, prs, image_path: str | None):
    add_full_slide_picture(slide, prs, image_path)


def add_cover_slide(
    prs,
    assets: dict,
    cover_title: str | None,
    cover_dates: str | None,
    logo1: str | None,
    logo2: str | None,
):
    slide = prs.slides.add_slide(prs.slide_layouts[6])  # blank
    add_bg(slide, prs, assets.get("cover"))

    # Title
    sw_in = emu_to_inches(prs.slide_width)
    left = PAGE_MARGIN_IN
    right = PAGE_MARGIN_IN
    top = 1.2
    height = 1.6
    width = max(1.0, sw_in - left - right)
    add_title_box(
        slide,
        cover_title or "Technical Update Briefing",
        left_in=left,
        top_in=top,
        width_in=width,
        height_in=height,
        font_size_pt=64,
        bold=True,
        color=GOLD,
    )

    # Dates
    add_text_box(
        slide,
        cover_dates or "",
        left_in=left,
        top_in=top + height + 0.2,
        width_in=width,
        height_in=0.6,
        size_pt=28,
        bold=False,
        color=WHITE,
    )

    # Logos bottom-left/right
    add_picture_safe(slide, path_if_exists(logo1), left_in=0.4, top_in=6.6, height_in=0.6)
    add_picture_safe(slide, path_if_exists(logo2), left_in=sw_in - 2.2, top_in=6.5, width_in=1.8)


def add_agenda_slide(prs, assets: dict, agenda_lines: list[str] | None = None):
    slide = prs.slides.add_slide(prs.slide_layouts[6])
    add_bg(slide, prs, assets.get("agenda"))
    # Title
    sw_in = emu_to_inches(prs.slide_width)
    add_title_box(
        slide,
        "Agenda",
        left_in=PAGE_MARGIN_IN,
        top_in=0.9,
        width_in=sw_in - 2 * PAGE_MARGIN_IN,
        height_in=1.2,
        font_size_pt=52,
        color=GOLD,
    )
    # Bullets
    if not agenda_lines:
        agenda_lines = ["Overview", "Key updates by product", "Timeline & rollout status", "Q&A"]
    top = 2.4
    for line in agenda_lines:
        add_text_box(
            slide,
            f"• {line}",
            left_in=PAGE_MARGIN_IN,
            top_in=top,
            width_in=sw_in - 2 * PAGE_MARGIN_IN,
            height_in=0.5,
            size_pt=26,
            color=WHITE,
        )
        top += 0.6


def add_separator_slide(prs, assets: dict, title: str):
    slide = prs.slides.add_slide(prs.slide_layouts[6])
    add_bg(slide, prs, assets.get("separator"))
    sw_in = emu_to_inches(prs.slide_width)
    add_title_box(
        slide,
        title,
        left_in=PAGE_MARGIN_IN,
        top_in=3.2,
        width_in=sw_in - 2 * PAGE_MARGIN_IN,
        height_in=1.5,
        font_size_pt=56,
        color=GOLD,
    )


def add_conclusion_slide(prs, assets: dict, links: list[tuple[str, str]]):
    slide = prs.slides.add_slide(prs.slide_layouts[6])
    add_bg(slide, prs, assets.get("conclusion"))
    sw_in = emu_to_inches(prs.slide_width)
    add_title_box(
        slide,
        "Final Thoughts",
        left_in=PAGE_MARGIN_IN,
        top_in=0.9,
        width_in=sw_in - 2 * PAGE_MARGIN_IN,
        height_in=1.2,
        font_size_pt=52,
        color=GOLD,
    )
    top = 2.4
    for text, url in links:
        add_text_box(
            slide,
            f"{text}: {url}",
            left_in=PAGE_MARGIN_IN,
            top_in=top,
            width_in=sw_in - 2 * PAGE_MARGIN_IN,
            height_in=0.5,
            size_pt=22,
            color=WHITE,
        )
        top += 0.6


def add_thankyou_slide(prs, assets: dict):
    slide = prs.slides.add_slide(prs.slide_layouts[6])
    add_bg(slide, prs, assets.get("thankyou"))
    # nothing else required; background handles the design


def add_item_slide(
    prs,
    item: Item,
    month_str: str | None,
    assets: dict,
    rail_width_in: float = DEFAULT_RAIL_WIDTH_IN,
    brand_bg: str | None = None,
):
    slide = prs.slides.add_slide(prs.slide_layouts[6])
    # Brand background first (overridable), else none
    add_bg(slide, prs, brand_bg)

    # Compute geometry
    sw_in = emu_to_inches(prs.slide_width)
    sh_in = emu_to_inches(prs.slide_height)

    # Side rail on right
    rail_left_in = max(0.0, sw_in - rail_width_in)
    draw_side_rail(slide, prs, rail_left_in, rail_width_in, color=DARK_PURPLE)

    # Product bubble (top-left)
    bubble_w = max(1.8, min(3.8, (sw_in - rail_width_in) * 0.35))
    add_bubble(
        slide,
        item.product or "",
        left_in=PAGE_MARGIN_IN,
        top_in=0.6,
        width_in=bubble_w,
        height_in=0.55,
    )

    # Title in gold (left area width excludes rail)
    title_left = PAGE_MARGIN_IN
    title_top = 1.4
    title_width = max(3.0, sw_in - rail_width_in - PAGE_MARGIN_IN - PAGE_MARGIN_IN)
    title_height = 1.5
    add_title_box(
        slide,
        item.title,
        left_in=title_left,
        top_in=title_top,
        width_in=title_width,
        height_in=title_height,
        font_size_pt=44,
        bold=True,
        color=GOLD,
        align=PP_ALIGN.LEFT,
    )

    # Summary body (below title)
    body_top = title_top + title_height + 0.2
    body_height = max(1.0, sh_in - body_top - 1.3)
    add_text_box(
        slide,
        item.summary or "",
        left_in=PAGE_MARGIN_IN,
        top_in=body_top,
        width_in=title_width,
        height_in=body_height,
        size_pt=22,
        color=WHITE,
    )

    # Right rail contents
    # Status icon + text
    icon_key = pick_status_icon_key(item.status)
    icon_path = path_if_exists(assets.get(icon_key))
    add_picture_safe(slide, icon_path, left_in=rail_left_in + 0.3, top_in=0.6, height_in=0.5)
    add_text_box(
        slide,
        item.status or "Status unknown",
        left_in=rail_left_in + 0.95,
        top_in=0.63,
        width_in=rail_width_in - 1.25,
        height_in=0.4,
        size_pt=18,
        color=WHITE,
    )

    # Month/date pill
    add_text_box(
        slide,
        month_str or item.month or item.date_str,
        left_in=rail_left_in + 0.3,
        top_in=1.25,
        width_in=rail_width_in - 0.6,
        height_in=0.45,
        size_pt=20,
        color=WHITE,
    )

    # Audience row with icons (best-effort)
    # Expect optional assets: admin.png, user.png, check.png
    aud_y = 1.9
    check = path_if_exists(assets.get("check"))
    admin_icon = path_if_exists(assets.get("admin"))
    user_icon = path_if_exists(assets.get("user"))

    # Admin
    if admin_icon:
        add_picture_safe(
            slide, admin_icon, left_in=rail_left_in + 0.3, top_in=aud_y, height_in=0.35
        )
    add_text_box(
        slide,
        "Admin",
        left_in=rail_left_in + 0.8,
        top_in=aud_y,
        width_in=1.2,
        height_in=0.35,
        size_pt=16,
        color=WHITE,
    )
    if "admin" in (item.audience or "").lower() and check:
        add_picture_safe(
            slide, check, left_in=rail_left_in + rail_width_in - 0.7, top_in=aud_y, height_in=0.3
        )

    # End user
    aud_y2 = aud_y + 0.55
    if user_icon:
        add_picture_safe(
            slide, user_icon, left_in=rail_left_in + 0.3, top_in=aud_y2, height_in=0.35
        )
    add_text_box(
        slide,
        "End User",
        left_in=rail_left_in + 0.8,
        top_in=aud_y2,
        width_in=1.2,
        height_in=0.35,
        size_pt=16,
        color=WHITE,
    )
    if "user" in (item.audience or "").lower() and check:
        add_picture_safe(
            slide, check, left_in=rail_left_in + rail_width_in - 0.7, top_in=aud_y2, height_in=0.3
        )

    # Roadmap ID + link (bottom of rail)
    bottom_y = sh_in - 1.1
    add_text_box(
        slide,
        f"ID: {item.roadmap_id or '—'}",
        left_in=rail_left_in + 0.3,
        top_in=bottom_y,
        width_in=rail_width_in - 0.6,
        height_in=0.35,
        size_pt=16,
        color=WHITE,
    )
    add_text_box(
        slide,
        item.url or "",
        left_in=rail_left_in + 0.3,
        top_in=bottom_y + 0.4,
        width_in=rail_width_in - 0.6,
        height_in=0.5,
        size_pt=12,
        color=WHITE,
    )

    # Speaker notes: put the long/verbose blob
    add_notes(slide, item.notes or item.summary or item.title)


# ----------------------------
# Build
# ----------------------------
def build(
    inputs: list[str],
    output_path: str,
    month: str | None,
    assets: dict,
    template: str | None,
    rail_width: float,
    conclusion_links: list[tuple[str, str]] | None = None,
):
    prs = Presentation(template) if (template and os.path.exists(template)) else Presentation()

    # Core section slides
    add_cover_slide(
        prs,
        assets,
        assets.get("cover_title"),
        assets.get("cover_dates"),
        assets.get("logo"),
        assets.get("logo2"),
    )
    add_agenda_slide(prs, assets)

    # Parse items
    items = parse_html_items(inputs)

    # Optional: per-product separators before items
    if items:
        # Group by product (stable order by first appearance)
        seen = {}
        groups: dict[str, list[Item]] = {}
        for it in items:
            k = (it.product or "General").strip()
            if k not in seen:
                seen[k] = True
                groups[k] = []
            groups[k].append(it)

        for product, group_items in groups.items():
            sep_title = f"{product} — {month or ''}".strip(" —")
            add_separator_slide(prs, assets, sep_title)
            for it in group_items:
                add_item_slide(
                    prs,
                    it,
                    month_str=month,
                    assets=assets,
                    rail_width_in=rail_width,
                    brand_bg=assets.get("brand_bg"),
                )

    # Conclusion + Thank you
    if not conclusion_links:
        conclusion_links = [
            ("Microsoft Security", "https://www.microsoft.com/en-us/security"),
            ("Azure Updates", "https://azure.microsoft.com/en-us/updates/"),
            (
                "Dynamics 365 & Power Platform",
                "https://www.microsoft.com/en-us/dynamics-365/?culture=en-us&country=us",
            ),
            (
                "Technical Documentation",
                "https://learn.microsoft.com/en-us/docs/?culture=en-us&country=us",
            ),
        ]
    add_conclusion_slide(prs, assets, conclusion_links)
    add_thankyou_slide(prs, assets)

    actual = _safe_save(prs, output_path)
    print(f"[ok] Deck saved to: {actual}")


# ----------------------------
# CLI
# ----------------------------
def main():
    p = argparse.ArgumentParser()
    p.add_argument(
        "-i",
        "--inputs",
        nargs="+",
        required=True,
        help="One or more HTML inputs (Roadmap/Message Center)",
    )
    p.add_argument("-o", "--output", required=True, help="Output .pptx")
    p.add_argument("--month", default="", help="Month label like 'September 2025'")
    # assets
    p.add_argument("--cover", dest="cover", default="", help="Cover background image")
    p.add_argument("--agenda-bg", dest="agenda_bg", default="", help="Agenda background image")
    p.add_argument("--separator", dest="separator", default="", help="Separator background image")
    p.add_argument(
        "--conclusion-bg", dest="conclusion_bg", default="", help="Conclusion background image"
    )
    p.add_argument("--thankyou", dest="thankyou", default="", help="Thank-you background image")
    p.add_argument(
        "--brand-bg", dest="brand_bg", default="", help="Generic brand background for item slides"
    )
    p.add_argument("--cover-title", dest="cover_title", default="", help="Cover title text")
    p.add_argument("--cover-dates", dest="cover_dates", default="", help="Cover dates text")
    p.add_argument(
        "--separator-title",
        dest="separator_title",
        default="",
        help="(unused; separators auto from product)",
    )
    p.add_argument("--logo", dest="logo", default="", help="Logo 1 (e.g., Parex)")
    p.add_argument("--logo2", dest="logo2", default="", help="Logo 2 (e.g., customer)")
    p.add_argument("--rocket", dest="rocket", default="", help="Path to rocket icon")
    p.add_argument("--magnifier", dest="magnifier", default="", help="Path to magnifier icon")
    p.add_argument("--admin", dest="admin", default="", help="Admin target-audience icon")
    p.add_argument("--user", dest="user", default="", help="User target-audience icon")
    p.add_argument("--check", dest="check", default="", help="Green check icon")
    p.add_argument("--template", dest="template", default="", help="Optional template .pptx")
    p.add_argument(
        "--rail-width",
        dest="rail_width",
        default=str(DEFAULT_RAIL_WIDTH_IN),
        help="Right rail width in inches (default 3.5)",
    )

    args = p.parse_args()

    assets = {
        "cover": path_if_exists(args.cover),
        "agenda": path_if_exists(args.agenda_bg),
        "separator": path_if_exists(args.separator),
        "conclusion": path_if_exists(args.conclusion_bg),
        "thankyou": path_if_exists(args.thankyou),
        "brand_bg": path_if_exists(args.brand_bg),
        "cover_title": args.cover_title or "M365 Technical Update Briefing",
        "cover_dates": args.cover_dates or args.month or "",
        "logo": path_if_exists(args.logo),
        "logo2": path_if_exists(args.logo2),
        "rocket": path_if_exists(args.rocket)
        or path_if_exists(os.path.join("assets", "rocket.png")),
        "magnifier": path_if_exists(args.magnifier)
        or path_if_exists(os.path.join("assets", "magnifier.png")),
        "admin": path_if_exists(args.admin) or path_if_exists(os.path.join("assets", "admin.png")),
        "user": path_if_exists(args.user) or path_if_exists(os.path.join("assets", "user.png")),
        "check": path_if_exists(args.check) or path_if_exists(os.path.join("assets", "check.png")),
    }

    rail_w = float(args.rail_width) if args.rail_width else DEFAULT_RAIL_WIDTH_IN

    build(
        inputs=args.inputs,
        output_path=args.output,
        month=args.month or "",
        assets=assets,
        template=args.template or None,
        rail_width=rail_w,
        conclusion_links=None,
    )


if __name__ == "__main__":
    main()
