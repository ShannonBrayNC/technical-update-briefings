*** a/tools/ppt_builder/generate_deck.py
--- b/tools/ppt_builder/generate_deck.py
@@
-from pptx import Presentation
+from pptx import Presentation  # keep import, but don't use as a param annotation
+from typing import Any, Optional, TYPE_CHECKING
+from bs4 import BeautifulSoup
+from bs4.element import Tag, NavigableString, ResultSet
+
+EMU_PER_INCH = 914400
+
+def emu_to_in(emu: int | float | None) -> float:
+    if emu is None:
+        return 0.0
+    return float(emu) / EMU_PER_INCH
+
+def slide_size_in(prs: Any) -> tuple[float, float]:
+    return emu_to_in(prs.slide_width), emu_to_in(prs.slide_height)
+
+def inches(x: float | None):
+    from pptx.util import Inches
+    return Inches(x or 0.0)
@@
-from bs4 import BeautifulSoup
-from bs4.element import Tag, NavigableString
+def safe_find(node: Tag | BeautifulSoup | None, name: str, **kwargs: Any) -> Optional[Tag]:
+    if node is None:
+        return None
+    el = node.find(name, **kwargs)
+    return el if isinstance(el, Tag) else None
+
+def safe_find_all(node: Tag | BeautifulSoup | None, name: str, **kwargs: Any) -> list[Tag]:
+    if node is None:
+        return []
+    res = node.find_all(name, **kwargs)
+    if isinstance(res, ResultSet):
+        return [t for t in res if isinstance(t, Tag)]
+    try:
+        return [t for t in res if isinstance(t, Tag)]
+    except TypeError:
+        return [res] if isinstance(res, Tag) else []
+
+def _txt(x: Tag | NavigableString | None) -> str:
+    if x is None:
+        return ""
+    if isinstance(x, NavigableString):
+        return str(x)
+    return x.get_text(" ", strip=True)
@@
-from dataclasses import dataclass
+from dataclasses import dataclass, fields as _dc_fields
@@
 @dataclass
 class Item:
     title: str = ""
     summary: str = ""
     url: str = ""
     roadmap_id: str = ""
     month: str = ""
     products: list[str] = None  # defaults handled at init time if needed
     platforms: list[str] = None
     audience: list[str] = None
     status: str = ""
     phases: list[str] = None
     clouds: list[str] = None
     created: str = ""
     modified: str = ""
     ga: str = ""
+
+# Allowed fields set for filtering kwargs â†’ Item(**filtered)
+_allowed_fields = {f.name for f in _dc_fields(Item)}
@@
-def _mk_item(**kwargs) -> Item:
-    filtered = {k: v for k, v in kwargs.items() if k in _allowed_fields}
-    return Item(**filtered)  # type: ignore[call-arg]
+def _mk_item(**kwargs) -> Item:
+    filtered = {k: v for k, v in kwargs.items() if k in _allowed_fields}
+    return Item(**filtered)  # type: ignore[call-arg]
@@
-def add_separator_slide(prs: Presentation, assets: dict, title: str):
+def add_separator_slide(prs: Any, assets: dict, title: str, subtitle: str | None = None):
     slide = prs.slides.add_slide(prs.slide_layouts[6])  # blank
     # ... existing title box code ...
+    # Optional subtitle
+    if subtitle:
+        # add a second textbox under the title if you want; safe position:
+        from pptx.util import Pt
+        sw_in, sh_in = slide_size_in(prs)
+        tb = slide.shapes.add_textbox(inches(1.0), inches(2.0), inches(sw_in - 2.0), inches(1.0))
+        tf = tb.text_frame
+        tf.clear()
+        p = tf.paragraphs[0]
+        p.text = subtitle
+        p.font.size = Pt(20)
+        p.level = 0
@@
-def add_cover_slide(prs: Presentation, assets: dict, cover_title: str, cover_dates: str, month_str: str | None = None):
-    sw_in = sw_in  # <- was undefined before
-    # left/top/width/height were not defined; define them here:
-    left = inches(0.5)
-    top = inches(0.5)
-    width = inches(sw_in - 1.0)
-    height = inches(1.5)
+def add_cover_slide(prs: Any, assets: dict, cover_title: str, cover_dates: str, month_str: str | None = None,
+                    logo_path: str | None = None, logo2_path: str | None = None):
+    sw_in, sh_in = slide_size_in(prs)
+    left = inches(0.5)
+    top = inches(0.5)
+    width = inches(max(sw_in - 1.0, 0.1))
+    height = inches(1.5)
     slide = prs.slides.add_slide(prs.slide_layouts[6])  # blank
     # title box
     tb = slide.shapes.add_textbox(left, top, width, height)
     tf = tb.text_frame
     tf.clear()
     p = tf.paragraphs[0]
     p.text = cover_title
     # dates line
-    tb2 = slide.shapes.add_textbox(inches(0.5), inches(2.1), inches(sw_in - 1.0), inches(0.9))
+    tb2 = slide.shapes.add_textbox(inches(0.5), inches(2.1), inches(max(sw_in - 1.0, 0.1)), inches(0.9))
     tf2 = tb2.text_frame
     tf2.clear()
     tf2.paragraphs[0].text = cover_dates
     # logos (optional)
-    add_picture_safe(slide, logo_path, inches(sw_in - 2.0), inches(sh_in - 1.2), inches(1.5), inches(1.0))
-    add_picture_safe(slide, logo2_path, inches(0.5), inches(sh_in - 1.2), inches(1.5), inches(1.0))
+    if logo_path:
+        add_picture_safe(slide, logo_path, inches(max(sw_in - 2.0, 0.1)), inches(max(sh_in - 1.2, 0.1)), inches(1.5), inches(1.0))
+    if logo2_path:
+        add_picture_safe(slide, logo2_path, inches(0.5), inches(max(sh_in - 1.2, 0.1)), inches(1.5), inches(1.0))
@@
-def add_item_slide(prs: Presentation, it: Item, month_str: str, assets: dict, rail_width_in: float):
+def add_item_slide(prs: Any, it: Item, month_str: str, assets: dict, rail_width_in: float):
     slide = prs.slides.add_slide(prs.slide_layouts[6])  # blank
     # draw rail, place texts, etc.
@@
-# If you moved parsers to modules, remove these old in-file parsers:
-# _parse_mc_cards, parse_html_items, parse_message_center_html
+# If you moved parsers to modules, remove old in-file parsers:
+# _parse_mc_cards, parse_html_items, parse_message_center_html
