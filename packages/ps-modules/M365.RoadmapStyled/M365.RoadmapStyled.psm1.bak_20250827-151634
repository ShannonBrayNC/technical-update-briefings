#requires -Version 7.0

#region ---------- Utilities ----------

function ConvertFrom-RoadmapDate {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)][string]$Text
    )
    $t = $Text.Trim()

    # Try ISO first
    try {
        return [datetime]::Parse($t, [Globalization.CultureInfo]::InvariantCulture)
    } catch {}

    # "Month CY2025"
    $m = [Text.RegularExpressions.Regex]::Match($t, '^(January|February|March|April|May|June|July|August|September|October|November|December)\s+CY(\d{4})$', 'IgnoreCase')
    if ($m.Success) {
        $month = ([datetime]::ParseExact($m.Groups[1].Value, 'MMMM', [Globalization.CultureInfo]::InvariantCulture)).Month
        $year  = [int]$m.Groups[2].Value
        return [datetime]::new($year, $month, 1, 0, 0, 0, [datetimekind]::Unspecified)
    }

    # "CY2025 Q3"
    $q = [Text.RegularExpressions.Regex]::Match($t, '^CY(\d{4})\s+Q([1-4])$', 'IgnoreCase')
    if ($q.Success) {
        $y  = [int]$q.Groups[1].Value
        $qq = [int]$q.Groups[2].Value
        $m0 = (($qq-1) * 3) + 1
        return [datetime]::new($y, $m0, 1, 0, 0, 0, [datetimekind]::Unspecified)
    }

    return $null
}

function Get-QuarterRange {
    [CmdletBinding()]
    param([Parameter(Mandatory)][datetime]$AnyDateInMonth)
    $y = $AnyDateInMonth.Year
    $m = $AnyDateInMonth.Month
    $qStartMonth = ([math]::Floor(($m-1)/3) * 3) + 1
    $start = [datetime]::new($y, $qStartMonth, 1)
    $end   = $start.AddMonths(3).AddDays(-1)
    [pscustomobject]@{ Start = $start; End = $end }
}

function Normalize-Cloud {
    [CmdletBinding()]
    param([string]$s)
    if (-not $s) { return $null }
    $n = $s.Trim()
    switch -Regex ($n) {
        '^(WW|Worldwide|Commercial|Standard.*Tenant)$' { return 'Worldwide (Standard Multi-Tenant)' }
        '^GCC High$'                                   { return 'GCC High' }
        '^(DoD|DOD)$'                                  { return 'DoD' }
        '^(G|GCC)$'                                    { return 'GCC' }
        default                                        { return $n }
    }
}

#endregion

#region ---------- Graph plumbing (optional) ----------

function Connect-GraphCertificate {
    <#
      .SYNOPSIS
        Optional cert-based Graph connection for future joins.
    #>
    [CmdletBinding()]
    param(
        [string]$TenantId,
        [string]$ClientId,
        [string]$CertificateThumbprint,
        [string]$CertificatePath,
        [string]$CertificatePassword,
        [ValidateSet('beta','v1.0')][string]$GraphProfile = 'v1.0'
    )

    if (-not (Get-Command Connect-MgGraph -ErrorAction SilentlyContinue)) {
        Write-Warning "Microsoft.Graph not installed; skipping Graph sign-in."
        return
    }
    Select-MgProfile -Name $GraphProfile | Out-Null

    if ($CertificateThumbprint) {
        Connect-MgGraph -TenantId $TenantId -ClientId $ClientId -CertificateThumbprint $CertificateThumbprint | Out-Null
        return
    }
    if ($CertificatePath) {
        $cert = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new(
            $CertificatePath,
            $CertificatePassword,
            [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::Exportable
        )
        Connect-MgGraph -TenantId $TenantId -ClientId $ClientId -Certificate $cert | Out-Null
        return
    }
    Write-Warning "No certificate material provided; Connect-GraphCertificate did nothing."
}

#endregion

#region ---------- Fetch / Filter ----------

function Get-RoadmapRaw {
    [CmdletBinding()]
    param([string]$Uri = 'https://www.microsoft.com/releasecommunications/api/v1/m365')
    Invoke-RestMethod -Uri $Uri -Method GET -ErrorAction Stop
}

function Filter-RoadmapItems {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)][object[]]$Items,
        [string[]]$Products,
        [string[]]$Platforms,
        [string[]]$ReleasePhase,
        [string[]]$Status,
        [string[]]$CloudInstances,
        [Nullable[datetime]]$UpdatedSince,
        [Nullable[datetime]]$CreatedSince,
        [string]$Text
    )

    $wantProd   = @($Products     | ForEach-Object { $_.Trim() } | Where-Object { $_ })
    $wantPlat   = @($Platforms    | ForEach-Object { $_.Trim() } | Where-Object { $_ })
    $wantPhase  = @($ReleasePhase | ForEach-Object { $_.Trim() } | Where-Object { $_ })
    $wantStatus = @($Status       | ForEach-Object { $_.Trim() } | Where-Object { $_ })
    $wantCloud  = @($CloudInstances | ForEach-Object { Normalize-Cloud $_ } | Where-Object { $_ })
    $textLC     = if ($Text) { $Text.ToLowerInvariant() } else { $null }

    $out = New-Object System.Collections.Generic.List[object]
    foreach ($it in $Items) {
        $prods   = @($it.products)
        $plats   = @($it.platforms)
        $ph      = [string]$it.releasePhase
        $st      = [string]$it.status
        $clouds0 = @($it.cloudInstances)
        $clouds  = @()
        foreach ($c in $clouds0) { $clouds += Normalize-Cloud $c }

        $created  = $null; if ($it.created)  { try { $created  = [datetime]$it.created  } catch {} }
        $modified = $null; if ($it.modified) { try { $modified = [datetime]$it.modified } catch {} }

        if ($textLC) {
            $t = ''
            if ($it.title)       { $t += $it.title }
            if ($it.description) { $t += " $($it.description)" }
            if (-not ($t.ToLowerInvariant().Contains($textLC))) { continue }
        }
        if ($UpdatedSince -and $modified -and $modified -lt $UpdatedSince) { continue }
        if ($CreatedSince -and $created  -and $created  -lt $CreatedSince) { continue }

        if ($wantProd.Count   -gt 0 -and (-not ($prods  | Where-Object { $wantProd   -contains $_ }))) { continue }
        if ($wantPlat.Count   -gt 0 -and (-not ($plats  | Where-Object { $wantPlat   -contains $_ }))) { continue }
        if ($wantPhase.Count  -gt 0 -and (-not ($wantPhase  -contains $ph)))                            { continue }
        if ($wantStatus.Count -gt 0 -and (-not ($wantStatus -contains $st)))                            { continue }
        if ($wantCloud.Count  -gt 0 -and (-not ($clouds | Where-Object { $wantCloud -contains $_ })))   { continue }

        $out.Add($it) | Out-Null
    }
    $out.ToArray()
}

#endregion

#region ---------- HTML builder (with inline ES5 client) ----------

function New-RoadmapHtml {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)][object[]]$Items,
        [string]$Title    = 'M365 Roadmap Briefing',
        [string]$Subtitle = (Get-Date -Format 'yyyy-MM-dd'),
        [ValidateSet('Cloud','Product','None')][string]$GroupBy = 'Cloud',
        [datetime]$GAFrom,
        [datetime]$GATo
    )

    $cloudIcon = @{
        'Worldwide (Standard Multi-Tenant)' = 'üåê'
        'GCC'      = 'üèõÔ∏è'
        'GCC High' = 'üõ°Ô∏è'
        'DoD'      = 'ü™ñ'
    }

    # Distinct lists for filters
    $allProducts = [System.Linq.Enumerable]::ToArray([System.Linq.Enumerable]::Distinct([string[]](@($Items | ForEach-Object { $_.products }) | Where-Object { $_ })))
    $allClouds   = [System.Linq.Enumerable]::ToArray([System.Linq.Enumerable]::Distinct([string[]](@($Items | ForEach-Object { $_.cloudInstances | ForEach-Object { Normalize-Cloud $_ } }) | Where-Object { $_ })))
    $allStatus   = [System.Linq.Enumerable]::ToArray([System.Linq.Enumerable]::Distinct([string[]](@($Items | ForEach-Object { $_.status }) | Where-Object { $_ })))
    $allPhase    = [System.Linq.Enumerable]::ToArray([System.Linq.Enumerable]::Distinct([string[]](@($Items | ForEach-Object { $_.releasePhase }) | Where-Object { $_ })))

    $gaStartAttr = if ($GAFrom) { [datetime]$GAFrom } else { $null }
    $gaEndAttr   = if ($GATo)   { [datetime]$GATo   } else { $null }

    $sb = [System.Text.StringBuilder]::new()
    [void]$sb.AppendLine('<!DOCTYPE html>')
    [void]$sb.AppendLine('<html lang="en">')
    [void]$sb.AppendLine('<head><meta charset="utf-8"/><meta name="viewport" content="width=device-width, initial-scale=1"/>')
    [void]$sb.AppendLine("<title>$Title</title>")
    [void]$sb.AppendLine(@'
<style>
:root{ --fg:#0f172a; --muted:#475569; --bg:#0b1220; --card:#0f172a; --pill:#1f2937; --accent:#6366f1; --ok:#22c55e; --warn:#f59e0b; --bad:#ef4444; --border:#1e293b;}
body{ margin:0; font-family: ui-sans-serif,system-ui,Segoe UI,Roboto,Helvetica,Arial; color:#e5e7eb; background:#0b1220;}
h1{ font-size:1.6rem; margin:0 0 .25rem 0}
h2{ font-size:1.15rem; margin:.75rem 0 .5rem 0}
.container{ max-width:1200px; margin:24px auto; padding:0 16px;}
.header{ display:flex; align-items:center; justify-content:space-between; flex-wrap:wrap; gap:12px; }
.subtitle{ color:#94a3b8; font-size:.95rem}
.filters{ margin:14px 0; padding:12px; background:#111827; border:1px solid #1f2937; border-radius:14px; }
.row{ display:flex; flex-wrap:wrap; gap:10px; align-items:center; margin:8px 0;}
.pill{ display:inline-flex; gap:8px; align-items:center; padding:6px 10px; border-radius:999px; background:#1f2937; border:1px solid #334155; font-size:.85rem; cursor:pointer; user-select:none;}
.pill input{ margin:0 }
.controls{ margin-left:auto; display:flex; gap:8px; align-items:center; }
.btn{ padding:6px 10px; border-radius:8px; border:1px solid #334155; background:#0f172a; color:#e5e7eb; cursor:pointer;}
.btn:hover{ border-color:#475569; }
.grid{ display:grid; gap:12px; grid-template-columns: repeat(auto-fill,minmax(280px,1fr));}
.card{ background:#0f172a; border:1px solid #1f2937; border-radius:14px; padding:12px; }
.card .title{ font-weight:600; margin:0 0 6px 0; }
.meta{ color:#9ca3af; font-size:.8rem; display:flex; flex-wrap:wrap; gap:8px; }
.badge{ display:inline-flex; align-items:center; gap:6px; padding:3px 8px; border-radius:999px; background:#111827; border:1px solid #334155;}
.section{ margin:18px 0; }
.section.hidden{ display:none; }
.hidden{ display:none; }
.search{ flex:1; min-width:200px; }
.search input{ width:100%; padding:8px 10px; background:#0f172a; border:1px solid #334155; border-radius:8px; color:#e5e7eb; }
.hr{ height:1px; background:#1f2937; margin:14px 0;}
.em{ color:#a78bfa;}
</style>
'@)
    [void]$sb.AppendLine('</head>')
    [void]$sb.AppendLine('<body>')
    [void]$sb.AppendLine("<div class='container'>")
    [void]$sb.AppendLine("<div class='header'><div><h1>$Title</h1><div class='subtitle'>$Subtitle</div></div>")
    [void]$sb.AppendLine("<div class='controls search'><input id='q' placeholder='Search title & description...' /></div></div>")

    if ($gaStartAttr -and $gaEndAttr) {
        [void]$sb.AppendLine("<div id='ga-window' data-start='{0:yyyy-MM-dd}' data-end='{1:yyyy-MM-dd}'></div>" -f $gaStartAttr, $gaEndAttr)
    }

    # Filters UI
    [void]$sb.AppendLine("<div id='filters' class='filters'>")
    [void]$sb.AppendLine("<div class='row'><strong>GA Window:</strong>")
    [void]$sb.AppendLine("<label class='pill'><input type='radio' name='ga-mode' value='month' checked /> Exact Month Only</label>")
    [void]$sb.AppendLine("<label class='pill'><input type='radio' name='ga-mode' value='quarter' /> Include Entire Quarter</label>")
    [void]$sb.AppendLine("<span class='controls'><button id='apply' class='btn'>Apply</button><button id='clear' class='btn'>Clear</button></span></div>")

    if ($allProducts.Count -gt 0) {
        [void]$sb.AppendLine("<div class='row'><strong>Products:</strong>")
        foreach($p in ($allProducts | Sort-Object)) {
            $id = 'prod_' + ($p -replace '\W','_')
            [void]$sb.AppendLine("<label class='pill' for='$id'><input id='$id' data-filter='prod' type='checkbox' value='$p' /> $p</label>")
        }
        [void]$sb.AppendLine("</div>")
    }

    if ($allClouds.Count -gt 0) {
        [void]$sb.AppendLine("<div class='row'><strong>Cloud:</strong>")
        foreach($c in ($allClouds | Sort-Object)) {
            $id = 'cloud_' + ($c -replace '\W','_')
            $icon = if ($cloudIcon.ContainsKey($c)) { $cloudIcon[$c] } else { '‚òÅÔ∏è' }
            [void]$sb.AppendLine("<label class='pill' for='$id'><input id='$id' data-filter='cloud' type='checkbox' value='$c' /> $icon $c</label>")
        }
        [void]$sb.AppendLine("</div>")
    }

    if ($allStatus.Count -gt 0) {
        [void]$sb.AppendLine("<div class='row'><strong>Status:</strong>")
        foreach($s in ($allStatus | Sort-Object)) {
            $id = 'status_' + ($s -replace '\W','_')
            [void]$sb.AppendLine("<label class='pill' for='$id'><input id='$id' data-filter='status' type='checkbox' value='$s' /> $s</label>")
        }
        [void]$sb.AppendLine("</div>")
    }

    if ($allPhase.Count -gt 0) {
        [void]$sb.AppendLine("<div class='row'><strong>Phase:</strong>")
        foreach($ph in ($allPhase | Sort-Object)) {
            $id = 'phase_' + ($ph -replace '\W','_')
            [void]$sb.AppendLine("<label class='pill' for='$id'><input id='$id' data-filter='phase' type='checkbox' value='$ph' /> $ph</label>")
        }
        [void]$sb.AppendLine("</div>")
    }

    [void]$sb.AppendLine("</div>")
    [void]$sb.AppendLine("<div class='hr'></div>")

    # Grouping
    $groups = @{}
    switch ($GroupBy) {
        'Cloud' {
            foreach($it in $Items) {
                $cl = @($it.cloudInstances | ForEach-Object { Normalize-Cloud $_ })
                if ($cl.Count -eq 0) { $cl = @('Worldwide (Standard Multi-Tenant)') }
                foreach($g in $cl) {
                    if (-not $groups.ContainsKey($g)) { $groups[$g] = New-Object System.Collections.Generic.List[object] }
                    $groups[$g].Add($it)
                }
            }
        }
        'Product' {
            foreach($it in $Items) {
                $pp = @($it.products); if ($pp.Count -eq 0) { $pp = @('Unspecified') }
                foreach($g in $pp) {
                    if (-not $groups.ContainsKey($g)) { $groups[$g] = New-Object System.Collections.Generic.List[object] }
                    $groups[$g].Add($it)
                }
            }
        }
        default {
            $groups['All Items'] = New-Object System.Collections.Generic.List[object]
            foreach($it in $Items){ $groups['All Items'].Add($it) }
        }
    }

    foreach($k in ($groups.Keys | Sort-Object)) {
        $arr = $groups[$k]
        $icon = if ($cloudIcon.ContainsKey($k)) { $cloudIcon[$k] } else { 'üóÇÔ∏è' }
        [void]$sb.AppendLine("<div class='section' data-group='$k'>")
        [void]$sb.AppendLine("<h2>$icon $k</h2>")
        [void]$sb.AppendLine("<div class='grid'>")

        foreach($it in $arr) {
            $prods  = @($it.products)
            $clouds = @($it.cloudInstances | ForEach-Object { Normalize-Cloud $_ })
            $phase  = [string]$it.releasePhase
            $status = [string]$it.status

            $gaStr = $null
            if ($it.PSObject.Properties['releaseDate'])  { $gaStr = $it.releaseDate }
            elseif ($it.PSObject.Properties['releaseMonth']) { $gaStr = $it.releaseMonth }

            $gaDt = if ($gaStr) { ConvertFrom-RoadmapDate -Text $gaStr } else { $null }
            $gaStart = $null; $gaEnd = $null
            if ($gaDt) { $gaStart = [datetime]::new($gaDt.Year,$gaDt.Month,1); $gaEnd = $gaStart.AddMonths(1).AddDays(-1) }

            $prodAttr  = ($prods  -join ',')
            $cloudAttr = ($clouds -join ',')
            $textBlob  = ''
            if ($it.title)       { $textBlob += $it.title }
            if ($it.description) { $textBlob += " $($it.description)" }
            $textAttr  = $textBlob.Replace('"','''')

            $gaStartAttr = if($gaStart){ 'data-ga-start="'+$gaStart.ToString('yyyy-MM-dd')+'"' } else { '' }
            $gaEndAttr   = if($gaEnd){   'data-ga-end="'+$gaEnd.ToString('yyyy-MM-dd')+'"'   } else { '' }

            [void]$sb.AppendLine("<div class='card' data-prod=""$prodAttr"" data-cloud=""$cloudAttr"" data-status=""$status"" data-phase=""$phase"" data-text=""$textAttr"" $gaStartAttr $gaEndAttr>")
            [void]$sb.AppendLine("<div class='title'>$($it.title)</div>")
            [void]$sb.Append("<div class='meta'>")
            if ($prods.Count)  { [void]$sb.Append("<span class='badge'>üß© $($prods -join ', ')</span>") }
            if ($clouds.Count) { [void]$sb.Append("<span class='badge'>‚òÅÔ∏è $($clouds -join ', ')</span>") }
            if ($phase)        { [void]$sb.Append("<span class='badge'>üöÄ $phase</span>") }
            if ($status)       { [void]$sb.Append("<span class='badge'>üìå $status</span>") }
            if ($gaDt)         { [void]$sb.Append("<span class='badge'>üìÖ GA: $($gaDt.ToString('yyyy-MM'))</span>") }
            [void]$sb.AppendLine("</div>")
            if ($it.description) {
                [void]$sb.AppendLine("<div class='desc'>$($it.description)</div>")
            }
            if ($it.id -and $it.link) {
                [void]$sb.AppendLine("<div class='meta'><a class='em' href='$($it.link)' target='_blank' rel='noopener'>Roadmap item $($it.id) ‚Üó</a></div>")
            }
            [void]$sb.AppendLine("</div>")
        }

        [void]$sb.AppendLine("</div></div>")
    }

    # Inline ES5 client
    [void]$sb.AppendLine(@'
<script>
(function(){
  function $(s,r){return (r||document).querySelector(s)};function $all(s,r){return Array.prototype.slice.call((r||document).querySelectorAll(s))}
  function t(s){return (s||"").replace(/^\s+|\s+$/g,"")};function lc(s){return t(s).toLowerCase()}
  var filters=$("#filters"),q=$("#q"),apply=$("#apply"),clearBtn=$("#clear"),ga=$("#ga-window"),cards=$all(".card");
  function parseIso(s){if(!s)return null; var d=new Date(s); return isNaN(d)?null:d}
  var baseS=ga?parseIso(ga.getAttribute("data-start")):null, baseE=ga?parseIso(ga.getAttribute("data-end")):null;
  function qRange(d){if(!d)return null; var m=d.getMonth(),qm=Math.floor(m/3)*3; return {start:new Date(d.getFullYear(),qm,1), end:new Date(d.getFullYear(),qm+3,0)}}
  function gaWindow(){ var r=document.querySelector("input[name='ga-mode']:checked"); var mode=r?r.value:"month";
    if(!baseS||!baseE) return null; if(mode==="quarter"){ var qr=qRange(baseS); return qr?qr:{start:baseS,end:baseE} } return {start:baseS,end:baseE} }
  function sel(type){ var inputs=$all("input[data-filter='"+type+"']",filters), chk=[];
    for(var i=0;i<inputs.length;i++){ if(inputs[i].checked) chk.push(lc(inputs[i].value)) }
    if(inputs.length>0 && chk.length===inputs.length) return []; // all checked == no filter
    return chk;
  }
  function listHit(card,arr,attr){ if(arr.length===0) return true; var raw=card.getAttribute("data-"+attr)||"",parts=raw.toLowerCase().split(","),vals=[];
    for(var i=0;i<parts.length;i++){ var s=t(parts[i]); if(s) vals.push(s) } for(var j=0;j<arr.length;j++){ if(vals.indexOf(arr[j])!==-1) return true } return false }
  function textHit(card,txt){ if(!txt) return true; var raw=card.getAttribute("data-text")||""; return raw.toLowerCase().indexOf(txt)!==-1 }
  function overlaps(card,win){ if(!win) return true; var a=card.getAttribute("data-ga-start"), b=card.getAttribute("data-ga-end"); if(!a||!b) return true;
    var s=new Date(a), e=new Date(b); if(isNaN(s)||isNaN(e)) return true; return !(e<win.start || s>win.end) }
  function applyNow(){
    var txt=lc(q?q.value:""), prod=sel("prod"), cloud=sel("cloud"), status=sel("status"), phase=sel("phase"), win=gaWindow();
    for(var i=0;i<cards.length;i++){ var c=cards[i]; var show = textHit(c,txt) && listHit(c,prod,"prod") && listHit(c,cloud,"cloud") && listHit(c,status,"status") && listHit(c,phase,"phase") && overlaps(c,win);
      if(show) c.classList.remove("hidden"); else c.classList.add("hidden"); }
    var secs=$all(".section"); for(var s=0;s<secs.length;s++){ var any=!!secs[s].querySelector(".card:not(.hidden)"); if(any) secs[s].classList.remove("hidden"); else secs[s].classList.add("hidden") }
  }
  if(filters){ filters.addEventListener("change",function(e){ var t=e&&e.target; if(t&&(t.matches("input[type='checkbox']")||t.matches("input[type='radio']"))) applyNow(); }); }
  if(q){ q.addEventListener("input",applyNow); }
  var radios=$all("input[name='ga-mode']"); for(var r=0;r<radios.length;r++){ radios[r].addEventListener("change",applyNow) }
  if(apply){ apply.addEventListener("click",applyNow) }
  if(clearBtn){ clearBtn.addEventListener("click",function(){
    if(q) q.value=""; var checks=$all("#filters input[type='checkbox']"); for(var i=0;i<checks.length;i++) checks[i].checked=false;
    var month=document.querySelector("input[name='ga-mode'][value='month']"); if(month){ month.checked=true } applyNow();
  })}
  applyNow();
})();
</script>
'@)

    [void]$sb.AppendLine("</div></body></html>")
    $sb.ToString()
}

#endregion

#region ---------- Public cmdlets ----------

function Get-M365Roadmap {
    [CmdletBinding()]
    param(
        [string[]]$Products,
        [string[]]$Platforms,
        [string[]]$ReleasePhase,
        [string[]]$Status,
        [string[]]$CloudInstances,
        [Nullable[datetime]]$UpdatedSince,
        [Nullable[datetime]]$CreatedSince,
        [string]$Text,

        [switch]$ThisMonth,
        [switch]$NextMonth,
        [datetime]$GAFrom,
        [datetime]$GATo,

        [ValidateSet('Cloud','Product','None')][string]$GroupBy = 'Cloud',
        [int]$Top = 0,
        [string]$Title = 'M365 Roadmap Briefing',
        [string]$OutputPath,

        [switch]$ConnectGraph,
        [string]$TenantId, [string]$ClientId,
        [string]$CertificateThumbprint, [string]$CertificatePath, [string]$CertificatePassword,
        [ValidateSet('beta','v1.0')][string]$GraphProfile = 'v1.0'
    )

    if ($ConnectGraph) {
        Connect-GraphCertificate -TenantId $TenantId -ClientId $ClientId `
            -CertificateThumbprint $CertificateThumbprint -CertificatePath $CertificatePath `
            -CertificatePassword $CertificatePassword -GraphProfile $GraphProfile
    }

    if ($ThisMonth) {
        $start = Get-Date -Day 1 -Hour 0 -Minute 0 -Second 0
        $end   = $start.AddMonths(1).AddDays(-1)
        $GAFrom = $start; $GATo = $end
        Write-Verbose ("GA window: This month ({0:d} - {1:d})" -f $GAFrom, $GATo)
    } elseif ($NextMonth) {
        $nm = (Get-Date).AddMonths(1)
        $start = Get-Date -Year $nm.Year -Month $nm.Month -Day 1 -Hour 0 -Minute 0 -Second 0
        $end   = $start.AddMonths(1).AddDays(-1)
        $GAFrom = $start; $GATo = $end
        Write-Verbose ("GA window: Next month ({0:d} - {1:d})" -f $GAFrom, $GATo)
    } elseif ($GAFrom -and $GATo) {
        Write-Verbose ("GA window: Custom ({0:d} - {1:d})" -f $GAFrom, $GATo)
    }

    $outPath = if ($OutputPath) { $OutputPath } else {
        Join-Path -Path (Get-Location) -ChildPath ("Roadmap_Briefing_{0}.html" -f (Get-Date -Format 'yyyyMMdd-HHmmss'))
    }
    Write-Verbose "Output path: $outPath"

    Write-Verbose "Fetching Roadmap: https://www.microsoft.com/releasecommunications/api/v1/m365"
    $raw = Get-RoadmapRaw
    $items = @()
    if ($raw.PSObject.Properties['features']) { $items = @($raw.features) } else { $items = @($raw) }
    Write-Verbose ("Items fetched: {0}" -f ($items.Count))

    $filtered = Filter-RoadmapItems -Items $items -Products $Products -Platforms $Platforms -ReleasePhase $ReleasePhase -Status $Status `
        -CloudInstances $CloudInstances -UpdatedSince $UpdatedSince -CreatedSince $CreatedSince -Text $Text
    Write-Verbose ("Items after filter: {0}" -f ($filtered.Count))

    $sorted = $filtered | Sort-Object { try { [datetime]$_.modified } catch { Get-Date '1900-01-01' } } -Descending
    if ($Top -gt 0 -and $sorted.Count -gt 0) { $sorted = @($sorted | Select-Object -First $Top) }

    $subtitle = Get-Date -Format 'yyyy-MM-dd'
    $html = New-RoadmapHtml -Items $sorted -Title $Title -Subtitle $subtitle -GroupBy $GroupBy -GAFrom $GAFrom -GATo $GATo

    $dir = Split-Path -Path $outPath -Parent
    if (-not (Test-Path $dir)) { New-Item -ItemType Directory -Path $dir | Out-Null }
    Set-Content -Path $outPath -Value $html -Encoding UTF8

    Write-Host "Roadmap briefing written to: $outPath"
    return $outPath
}

function Get-M365ServiceMessages {
    [CmdletBinding()] param()
    Write-Warning "Get-M365ServiceMessages is not implemented in this module."
}

Export-ModuleMember -Function Connect-GraphCertificate, Get-M365Roadmap, Get-M365ServiceMessages

#endregion

