
<#  M365.RoadmapStyled.psm1  (PowerShell 7+)
    Clean minimal rebuild: fetch M365 Roadmap API, filter, and render styled HTML.
    Exports:
      - Get-M365Roadmap
      - Connect-GraphCertificate (stub for future Graph use)
      - Get-M365ServiceMessages (stub passthrough for future consolidation)
#>

using namespace System.Collections.Generic

function Ensure-List {
    param([Parameter(Mandatory)][object]$Value)
    if ($null -eq $Value) { return @() }
    if ($Value -is [System.Array]) { return @($Value) }
    return @($Value)
}

function Ensure-StringList {
    param([object]$Value)
    $list = Ensure-List $Value
    return @($list | Where-Object {$_} | ForEach-Object {[string]$_})
}

function Normalize-RoadmapItem {
    param([Parameter(Mandatory)][psobject]$Item)

    # Pull tags from tagsContainer if present, else from root (be liberal)
    $tc = $Item.tagsContainer
    $products = if ($tc -and $tc.PSObject.Properties['products']) { Ensure-StringList $tc.products } else { Ensure-StringList $Item.products }
    $platforms = if ($tc -and $tc.PSObject.Properties['platforms']) { Ensure-StringList $tc.platforms } else { Ensure-StringList $Item.platforms }
    $clouds   = if ($tc -and $tc.PSObject.Properties['clouds'])   { Ensure-StringList $tc.clouds }   else { Ensure-StringList $Item.clouds }
    $phases   = if ($tc -and $tc.PSObject.Properties['releasePhase']) { Ensure-StringList $tc.releasePhase } else { Ensure-StringList $Item.releasePhase }

    # Normalize casing
    $products = @($products | ForEach-Object { $_.Trim() })
    $platforms = @($platforms | ForEach-Object { $_.Trim() })
    $clouds = @($clouds | ForEach-Object { $_.Trim() })
    $phases = @($phases | ForEach-Object { $_.Trim() })

    # Dates
    $created = $null
    $modified = $null
    if ($Item.PSObject.Properties['created']) {
        [datetime]::TryParse([string]$Item.created, [ref]$created) | Out-Null
    }
    if ($Item.PSObject.Properties['modified']) {
        [datetime]::TryParse([string]$Item.modified, [ref]$modified) | Out-Null
    }

    [pscustomobject]@{
        id          = $Item.id
        title       = [string]$Item.title
        description = [string]$Item.description
        status      = [string]$Item.status
        created     = $created
        modified    = $modified
        products    = $products
        platforms   = $platforms
        clouds      = $clouds
        phases      = $phases
        raw         = $Item
        gaText = (Get-GAText -Item $Item)

    }
}

function ConvertFrom-RoadmapDate {
    param([object]$Value)
    if ($null -eq $Value) { return $null }
    $dt = $null
    if ($Value -is [datetime]) { return $Value }
    [datetime]::TryParse([string]$Value, [ref]$dt) | Out-Null
    return $dt
}

function Filter-RoadmapItems {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)][psobject[]]$Items,
        [string[]]$CloudInstances,
        [string[]]$Products,
        [string[]]$Platforms,
        [string[]]$ReleasePhase,
        [string[]]$Status,
        [datetime]$UpdatedSince,
        [datetime]$CreatedSince
    )
    $data = @($Items | ForEach-Object { Normalize-RoadmapItem $_ })

    if ($Products -and $Products.Count -gt 0) {
        $want = @($Products | ForEach-Object { $_.ToLowerInvariant().Trim() })
        $data = $data | Where-Object { ($_.products | ForEach-Object { $_.ToLowerInvariant() }) | Where-Object { $want -contains $_ } | Measure-Object | Select-Object -ExpandProperty Count } | ForEach-Object {
            if ($_ -gt 0) { $true } else { $false }
        } | ForEach-Object { $true }  # ensure pipeline not empty
        $data = @($Items | ForEach-Object { Normalize-RoadmapItem $_ } | Where-Object {
            ($_.products | ForEach-Object { $_.ToLowerInvariant() } | Where-Object { $want -contains $_ }).Count -gt 0
        })
    }

    if ($Platforms -and $Platforms.Count -gt 0) {
        $want = @($Platforms | ForEach-Object { $_.ToLowerInvariant().Trim() })
        $data = @($data | Where-Object {
            ($_.platforms | ForEach-Object { $_.ToLowerInvariant() } | Where-Object { $want -contains $_ }).Count -gt 0
        })
    }

    if ($CloudInstances -and $CloudInstances.Count -gt 0) {
        $want = @($CloudInstances | ForEach-Object { $_.ToLowerInvariant().Trim() })
        $data = @($data | Where-Object {
            ($_.clouds | ForEach-Object { $_.ToLowerInvariant() } | Where-Object { $want -contains $_ }).Count -gt 0
        })
    }

    if ($ReleasePhase -and $ReleasePhase.Count -gt 0) {
        $want = @($ReleasePhase | ForEach-Object { $_.ToLowerInvariant().Trim() })
        # Also map 'General Availability' to status 'Launched' as a fallback
        $data = @($data | Where-Object {
            ($_.phases | ForEach-Object { $_.ToLowerInvariant() } | Where-Object { $want -contains $_ }).Count -gt 0 -or
            ($want -contains 'general availability' -and ($_.status).ToLowerInvariant() -eq 'launched')
        })
    }

    if ($Status -and $Status.Count -gt 0) {
        $want = @($Status | ForEach-Object { $_.ToLowerInvariant().Trim() })
        $data = @($data | Where-Object { ($_.status).ToLowerInvariant() -in $want })
    }

    if ($UpdatedSince) {
        $data = @($data | Where-Object {
            $d = ConvertFrom-RoadmapDate $_.modified
            if ($d) { $d -ge $UpdatedSince } else { $false }
        })
    }
    if ($CreatedSince) {
        $data = @($data | Where-Object {
            $d = ConvertFrom-RoadmapDate $_.created
            if ($d) { $d -ge $CreatedSince } else { $false }
        })
    }

    return ,$data
}

function New-RoadmapHtml {
    [CmdletBinding()]
    param(
        [Parameter(Mandatory)][psobject[]]$Items,
        [string]$Title = 'Roadmap Briefing',
        [string]$Subtitle,
        [ValidateSet('Cloud','Product','Platform','None')][string]$GroupBy = 'Cloud'
    )

    $items = @($Items)
    $date = Get-Date -Format 'yyyy-MM-dd'

    $rows = foreach ($it in $items) {
        $clouds = if ($it.clouds) { ($it.clouds -join ', ') } else { '—' }
        $platforms = if ($it.platforms) { ($it.platforms -join ', ') } else { '—' }
        $products = if ($it.products) { ($it.products -join ', ') } else { '—' }
        $phase = if ($it.phases) { ($it.phases -join ', ') } else { '—' }
        $status = if ($it.status) { $it.status } else { '—' }
@"
<div class='card' data-clouds='$clouds' data-products='$products' data-platforms='$platforms' data-phase='$phase' data-status='$status'>
  <div class='card-title'>$($it.title -replace '&','&amp;')</div>
  <div class='meta'>
    <span class='badge cloud'>$clouds</span>
    <span class='badge product'>$products</span>
    <span class='badge platform'>$platforms</span>
    <span class='badge phase'>$phase</span>
    <span class='badge status'>$status</span>
  </div>
  <div class='desc'>$($it.description)</div>
</div>
"@
    }

    $rowsHtml = ($rows -join "`n")
    $count = $items.Count

@"
<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8"/>
<title>$Title</title>
<style>
  body{font-family:Segoe UI,Arial,sans-serif;margin:24px;background:#0b1220;color:#e8eefc}
  .hdr{display:flex;align-items:baseline;gap:12px;margin-bottom:16px}
  h1{margin:0;font-size:22px}
  .sub{opacity:.8}
  .ctrls{display:flex;flex-wrap:wrap;gap:8px;align-items:center;margin:16px 0}
  .card{background:#121a2a;border:1px solid #1f2a44;border-radius:12px;padding:12px;margin:10px 0}
  .card-title{font-weight:600;margin-bottom:6px}
  .badge{background:#1b2540;border:1px solid #31416b;border-radius:999px;padding:2px 8px;margin-right:6px;font-size:12px}
  .muted{opacity:.7}
  button{background:#2b3b6b;border:1px solid #3e5396;color:#fff;padding:6px 10px;border-radius:8px;cursor:pointer}
  button:hover{filter:brightness(1.1)}
  .count{font-size:12px;opacity:.8}
</style>
</head>
<body>
  <div class="hdr">
    <h1>$Title</h1><span class="sub">$Subtitle • $date</span><span class="count" id="count">($count)</span>
  </div>
  <div class="ctrls">
    <label><input type="checkbox" class="cloud" value="GCC"> GCC</label>
    <label><input type="checkbox" class="cloud" value="GCC High"> GCC High</label>
    <label><input type="checkbox" class="cloud" value="DoD"> DoD</label>
    <label><input type="checkbox" class="cloud" value="Worldwide (Standard Multi-Tenant)"> Worldwide</label>
    <button id="apply">Apply</button>
    <button id="clear">Clear</button>
  </div>
  <div id="list">
    $rowsHtml
  </div>
<script>
(function(){
  function getSel(cls){
    return Array.from(document.querySelectorAll('input.'+cls+':checked')).map(el=>el.value.toLowerCase());
  }
  function show(el){ el.style.display=''; }
  function hide(el){ el.style.display='none'; }
  function normList(s){ return s.split(',').map(x=>x.trim().toLowerCase()).filter(Boolean); }

  function apply(){
    const clouds = getSel('cloud');
    const cards = Array.from(document.querySelectorAll('.card'));
    let shown = 0;

    cards.forEach(c=>{
      const cClouds = normList(c.dataset.clouds || '');
      let ok = true;

      if (clouds.length){
        ok = cClouds.some(x => clouds.includes(x));
      }

      if (ok){ show(c); shown++; } else { hide(c); }
    });

    document.getElementById('count').textContent = '('+shown+')';
  }

  document.getElementById('apply').addEventListener('click', apply);
  document.getElementById('clear').addEventListener('click', ()=>{
    document.querySelectorAll('input[type=checkbox]').forEach(x=>x.checked=false);
    document.getElementById('count').textContent = '('+document.querySelectorAll('.card').length+')';
    document.querySelectorAll('.card').forEach(show);
  });
})();
</script>
</body>
</html>
"@
}

function Connect-GraphCertificate {
    [CmdletBinding()]
    param(
      [string]$TenantId,
      [string]$ClientId,
      [string]$CertificateThumbprint
    )
    Write-Verbose "Graph certificate plumbing placeholder (PS7+ ready)."
}

function Get-M365ServiceMessages {
    [CmdletBinding()]
    param([switch]$PassThru)
    if ($PassThru) { return @() }  # placeholder
    Write-Verbose "Service Messages placeholder for future consolidation."
}

function Get-M365Roadmap {
    [CmdletBinding()]
    param(
        [string[]]$CloudInstances,
        [string[]]$Products,
        [string[]]$Platforms,
        [string[]]$ReleasePhase,
        [string[]]$Status,
        [datetime]$UpdatedSince,
        [datetime]$CreatedSince,
        [ValidateSet('Cloud','Product','Platform','None')][string]$GroupBy = 'Cloud',
        [int]$Top = 200,
        [string]$Title = 'Roadmap Briefing',
        [switch]$ThisMonth,
        [switch]$NextMonth,
        [switch]$GAQuarter,   # if set, filter to the full quarter of the selected month

        [string]$OutputPath
    )

    Write-Verbose "Begin Get-M365Roadmap"
    $url = 'https://www.microsoft.com/releasecommunications/api/v1/m365'
    Write-Verbose "Fetching Roadmap: $url"
    $raw = Invoke-RestMethod -Uri $url
    $items = if ($raw.PSObject.Properties['features']) { @($raw.features) } else { @($raw) }
    Write-Verbose "Items fetched: $($items.Count)"

   # --- GA window (planned month) ---
$GAFrom = $null; $GATo = $null
if ($ThisMonth -or $NextMonth) {
    $base = Get-Date
    $first = Get-Date -Date (Get-Date -Format 'yyyy-MM-01')
    if ($NextMonth) { $first = $first.AddMonths(1) }
    $GAFrom = $first
    if ($GAQuarter) {
        # Start of quarter for $GAFrom
        $qStartMonth = ( [math]::Floor( ($GAFrom.Month - 1) / 3 ) * 3 ) + 1
        $GAFrom = [datetime]::new($GAFrom.Year, $qStartMonth, 1)
        $GATo   = $GAFrom.AddMonths(3)  # open end
    } else {
        $GATo = $GAFrom.AddMonths(1)
    }
    Write-Verbose ("GA window: {0}..{1} (planned months via GA text)" -f $GAFrom.ToShortDateString(), $GATo.AddDays(-1).ToShortDateString())
}

# existing filter call:
$filtered = Filter-RoadmapItems -Items $items -CloudInstances $CloudInstances -Products $Products -Platforms $Platforms -ReleasePhase $ReleasePhase -Status $Status -UpdatedSince $UpdatedSince -CreatedSince $CreatedSince
Write-Verbose "Items after base filters: $($filtered.Count)"

# Apply GA month/quarter filter on GA text if requested
if ($GAFrom) {
    $filtered = @($filtered | Where-Object {
        $ga = ConvertFrom-GAText (Get-GAText $_.raw)
        if ($ga) {
            ($ga -ge $GAFrom) -and ($ga -lt $GATo)
        } else {
            $false
        }
    })
    Write-Verbose "Items after GA window filter: $($filtered.Count)"
}
    
    
    if ($Top -gt 0 -and $filtered.Count -gt 0) {
        $sorted = @($filtered | Sort-Object -Property @{Expression = { $_.modified }; Descending = $true}, @{Expression = { $_.created }; Descending = $true})
        $filtered = @($sorted | Select-Object -First $Top)
    }

    $subtitle = "$(if($ReleasePhase){$ReleasePhase -join ', '} else {'All phases'})"
    $html = New-RoadmapHtml -Items $filtered -Title $Title -Subtitle $subtitle -GroupBy $GroupBy

    if (-not $OutputPath) {
        $file = "C:\M365 Roadmap Components\Roadmap_Briefing_{0}.html" -f (Get-Date -Format 'yyyyMMdd-HHmmss')
    } else {
        $file = $OutputPath
    }
    $dir = Split-Path -Parent $file
    if (-not (Test-Path $dir)) { New-Item -ItemType Directory -Path $dir -Force | Out-Null }
    $html | Set-Content -Path $file -Encoding UTF8
    Write-Host "Roadmap briefing written to: $file"
    return $file
}

Export-ModuleMember -Function Get-M365Roadmap,Connect-GraphCertificate,Get-M365ServiceMessages
