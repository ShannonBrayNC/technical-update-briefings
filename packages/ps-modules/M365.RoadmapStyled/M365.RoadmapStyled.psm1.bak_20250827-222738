#requires -Version 7.0

#region Helpers

function Ensure-StringList {
  param([object]$Value)
  if ($null -eq $Value) { return @() }
  if ($Value -is [string]) { return @($Value) }
  if ($Value -is [System.Collections.IEnumerable]) {
    return @($Value | ForEach-Object { if ($null -ne $_) { $_.ToString() } })
  }
  return @($Value.ToString())
}

function Normalize-Cloud {
  param([string]$Name)
  if ([string]::IsNullOrWhiteSpace($Name)) { return $null }
  $n = $Name.Trim()
  switch -Regex ($n.ToLowerInvariant()) {
    '^(worldwide|worldwide\s*\(standard.*\))$' { 'Worldwide (Standard Multi-Tenant)'; break }
    '^gcc high$'                               { 'GCC High'; break }
    '^gcc$'                                    { 'GCC'; break }
    '^(dod|us gov dod)$'                       { 'DoD'; break }
    default                                    { $Name }
  }
}

function ConvertFrom-RoadmapDate {
  param([object]$Value)
  if ($null -eq $Value) { return $null }
  $s = $Value.ToString().Trim()
  if ($s -eq '') { return $null }

  # "September CY2025"
  if ($s -match '^(?<mon>[A-Za-z]+)\s+CY(?<y>\d{4})$') {
    $m = [datetime]::ParseExact($Matches.mon,'MMMM',[Globalization.CultureInfo]::InvariantCulture).Month
    return Get-Date -Year $Matches.y -Month $m -Day 1
  }

  # "Q3 CY2025" (map to first day of quarter)
  if ($s -match '^Q(?<q>[1-4])\s+CY(?<y>\d{4})$') {
    $startMonth = 1 + ([int]$Matches.q - 1) * 3
    return Get-Date -Year $Matches.y -Month $startMonth -Day 1
  }

  # ISO or common forms
  $dt = $null
  if ([datetime]::TryParse($s, [ref]$dt)) { return $dt }
  return $null
}

#endregion

#region Filtering

function Filter-RoadmapItems {
  [CmdletBinding()]
  param(
    [Parameter(Mandatory)] [object[]] $Items,

    [string[]] $Products,
    [string[]] $Platforms,
    [string[]] $CloudInstances,
    [string[]] $ReleasePhase,
    [string[]] $Status,
    [string]   $Text,

    [datetime] $UpdatedSince,
    [datetime] $CreatedSince,

    # Single DateTime values; omit to ignore
    [datetime] $GAFrom,
    [datetime] $GATo
  )

  function _list ($x) { if($null -eq $x){ @() } elseif($x -is [string]){ @($x) } else { @($x) } }
  function _norm ($x) { (_list $x) | ForEach-Object { $_.ToString().Trim() } }
  function _lower($x) { (_norm $x) | ForEach-Object { $_.ToLowerInvariant() } }

  $data = @($Items)

  if ($Products) {
    $want = _lower $Products
    $data = $data | Where-Object {
      $vals = _lower $_.products
      ($vals | Where-Object { $want -contains $_ }).Count -gt 0
    }
  }

  if ($Platforms) {
    $want = _lower $Platforms
    $data = $data | Where-Object {
      $vals = _lower $_.platforms
      ($vals | Where-Object { $want -contains $_ }).Count -gt 0
    }
  }

  if ($CloudInstances) {
    $want = _lower $CloudInstances | ForEach-Object { (Normalize-Cloud $_).ToLowerInvariant() }
    $data = $data | Where-Object {
      $vals = _lower (($_.clouds | ForEach-Object { Normalize-Cloud $_ }))
      ($vals | Where-Object { $want -contains $_ }).Count -gt 0
    }
  }

  if ($ReleasePhase) {
    $want = _lower $ReleasePhase
    $data = $data | Where-Object {
      $vals = _lower $_.phases
      ($vals | Where-Object { $want -contains $_ }).Count -gt 0
    }
  }

  if ($Status) {
    $want = _lower $Status
    $data = $data | Where-Object {
      $s = $_.status
      if ($null -eq $s) { $false } else { $want -contains $s.ToString().ToLowerInvariant() }
    }
  }

  if ($UpdatedSince) {
    $data = $data | Where-Object {
      $d = ConvertFrom-RoadmapDate $_.modified
      $d -and $d -ge $UpdatedSince
    }
  }

  if ($CreatedSince) {
    $data = $data | Where-Object {
      $d = ConvertFrom-RoadmapDate $_.created
      $d -and $d -ge $CreatedSince
    }
  }

  if ($GAFrom -or $GATo) {
    $from = if($GAFrom){ $GAFrom } else { [datetime]::MinValue }
    $to   = if($GATo  ){ $GATo   } else { [datetime]::MaxValue }
    $data = $data | Where-Object {
      $ga = ConvertFrom-RoadmapDate $_.generalAvailability
      $ga -and $ga -ge $from -and $ga -le $to
    }
  }

  if ($Text) {
    $needle = $Text.ToLowerInvariant()
    $data = $data | Where-Object {
      $hay = @(
        $_.id, $_.title, $_.description,
        (Ensure-StringList $_.products)  -join ' ',
        (Ensure-StringList $_.platforms) -join ' ',
        (Ensure-StringList $_.clouds)    -join ' ',
        (Ensure-StringList $_.phases)    -join ' '
      ) -join ' '
      $hay.ToLowerInvariant().Contains($needle)
    }
  }

  ,@($data)
}

#endregion

#region HTML

function New-EmojiMap {
  # Keep in sync with Message Center vibe
  @{
    'microsoft teams' = 'üí¨'
    'sharepoint'      = 'üóÇÔ∏è'
    'onedrive'        = '‚òÅÔ∏è'
    'exchange'        = '‚úâÔ∏è'
    'outlook'         = 'üìß'
    'viva'            = '‚ú®'
    'entra'           = 'üîê'
    'intune'          = 'üõ°Ô∏è'
    'defender'        = 'üõ°Ô∏è'
    'power apps'      = '‚ö°'
    'power automate'  = '‚ö°'
    'power bi'        = 'üìä'
    'loop'            = 'üåÄ'
    'copilot'         = 'ü§ñ'
  }
}

function New-RoadmapHtml {
  [CmdletBinding()]
  param(
    [Parameter(Mandatory)] [object[]] $Items,
    [string] $Title = 'M365 Roadmap',
    [string] $Subtitle = $(Get-Date -Format 'yyyy-MM-dd'),
    [ValidateSet('Cloud','Technology','Status','None')] [string] $GroupBy = 'Cloud'
  )

  # html encode
  Add-Type -AssemblyName System.Web
  function h([string]$s){ if($null -eq $s){''} else {[System.Web.HttpUtility]::HtmlEncode($s)} }

  $emoji = New-EmojiMap

  # project to render objects with normalized arrays + computed GA month/qtr
  $rows = foreach($it in $Items){
    $tc = $it.tagsContainer
    $products = if ($tc -and $tc.PSObject.Properties['products']) { Ensure-StringList $tc.products } else { Ensure-StringList $it.products }
    $platforms = if ($tc -and $tc.PSObject.Properties['platforms']) { Ensure-StringList $tc.platforms } else { Ensure-StringList $it.platforms }
    $clouds   = if ($tc -and $tc.PSObject.Properties['clouds'])   { Ensure-StringList $tc.clouds }   else { Ensure-StringList $it.clouds }
    $phases   = if ($tc -and $tc.PSObject.Properties['phases'])   { Ensure-StringList $tc.phases }   else { Ensure-StringList $it.phases }

    $ga   = ConvertFrom-RoadmapDate $it.generalAvailability
    $gai  = if($ga){ $ga.ToString('yyyy-MM-01') } else { '' }
    $q    = if($ga){ 'Q{0} {1}' -f ([int][math]::Ceiling($ga.Month/3)), $ga.Year } else { '' }

    [pscustomobject]@{
      id          = $it.id
      title       = $it.title
      description = $it.description
      link        = $it.link
      status      = $it.status
      products    = $products
      platforms   = $platforms
      clouds      = $clouds
      phases      = $phases
      created     = ConvertFrom-RoadmapDate $it.created
      modified    = ConvertFrom-RoadmapDate $it.modified
      gaIsoMonth  = $gai
      gaQuarter   = $q
    }
  }

  $cards = foreach($r in $rows){
    $prodBadges = @()
    foreach($p in $r.products){
      $key = $p.ToString().ToLowerInvariant()
      $sym = if ($emoji.ContainsKey($key)) { $emoji[$key] } else { 'üì¶' }
      $prodBadges += "<span class='badge' title='${p}'>$sym</span>"
    }

    $clouds = ($r.clouds | ForEach-Object { Normalize-Cloud $_ }) -join ', '

    @"
  <article class="card"
           data-products="${( ($r.products -join '|')   )}"
           data-platforms="${( ($r.platforms -join '|') )}"
           data-clouds="${( ($r.clouds | ForEach-Object { Normalize-Cloud $_ }) -join '|' )}"
           data-phases="${( ($r.phases -join '|') )}"
           data-status="${( [string]$r.status )}"
           data-gamonth="${( $r.gaIsoMonth )}"
           data-gaquarter="${( $r.gaQuarter )}">
    <header>
      <h3>${(h $r.title)}</h3>
      <div class="badges">$($prodBadges -join '')</div>
    </header>
    <div class="meta">
      <span><strong>Status:</strong> ${(h $r.status)}</span>
      <span><strong>Clouds:</strong> ${(h $clouds)}</span>
      <span><strong>GA:</strong> ${(h ($r.gaQuarter))} ${(h ($r.gaIsoMonth))}</span>
    </div>
    <p>${(h $r.description)}</p>
    <footer>
      <a href="${(h $r.link)}" target="_blank" rel="noopener">Roadmap</a>
    </footer>
  </article>
"@
  }

  $cloudOpts = @('Worldwide (Standard Multi-Tenant)','GCC','GCC High','DoD') | ForEach-Object {
    "<label><input type='checkbox' class='flt-cloud' value='$_'> $_</label>"
  } -join ''

  $html = @"
<!doctype html>
<html lang="en">
<meta charset="utf-8">
<meta name="viewport" content="width=device-width,initial-scale=1">
<title>${(h $Title)} ‚Äî ${(h $Subtitle)}</title>
<style>
  :root { --fg:#101418; --muted:#5b6570; --card:#ffffff; --bg:#f6f8fb; --brand:#2563eb; }
  * { box-sizing: border-box; }
  body { margin:0; font:14px/1.45 ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto; color:var(--fg); background:var(--bg); }
  header.top { padding:16px 20px; background:#fff; border-bottom:1px solid #e5e7eb; position:sticky; top:0; z-index:10; }
  h1 { font-size:18px; margin:0 0 4px; }
  .sub { color:var(--muted); }
  .toolbar { display:flex; gap:16px; flex-wrap:wrap; margin-top:10px; align-items:flex-end; }
  .group { background:#fff; padding:10px; border:1px solid #e5e7eb; border-radius:10px; }
  .group h4 { margin:0 0 6px; font-size:12px; text-transform:uppercase; letter-spacing:.04em; color:var(--muted); }
  .group label { display:inline-flex; gap:6px; margin:3px 10px 3px 0; align-items:center; }
  .actions button { padding:8px 12px; border-radius:8px; border:1px solid #d1d5db; background:#fff; cursor:pointer; }
  .actions button.primary { background:var(--brand); color:#fff; border-color:var(--brand); }
  main { padding:18px; max-width:1200px; margin:0 auto; }
  .cards { display:grid; grid-template-columns:repeat(auto-fill,minmax(320px,1fr)); gap:14px; }
  .card { background:var(--card); border:1px solid #e5e7eb; border-radius:12px; padding:14px; display:flex; flex-direction:column; gap:8px; }
  .card header { display:flex; justify-content:space-between; align-items:center; gap:8px; }
  .card h3 { font-size:16px; margin:0; }
  .badge { display:inline-flex; width:24px; height:24px; align-items:center; justify-content:center; border-radius:999px; background:#f1f5f9; margin-left:6px; }
  .meta { font-size:12px; color:var(--muted); display:flex; gap:14px; flex-wrap:wrap; }
  .empty { text-align:center; padding:40px; color:var(--muted); }
  .note { font-size:12px; color:var(--muted); margin-left:6px; }
  .toggle { margin-left:8px; }
</style>

<header class="top">
  <h1>${(h $Title)}</h1>
  <div class="sub">Generated ${(h $Subtitle)}</div>

  <div class="toolbar">
    <div class="group">
      <h4>Cloud instances</h4>
      <div>$cloudOpts</div>
      <div class="note">If none or all are selected, instance filtering is ignored.</div>
    </div>

    <div class="group">
      <h4>Status</h4>
      <label><input type="checkbox" class="flt-status" value="Launched" checked> Launched</label>
      <label><input type="checkbox" class="flt-status" value="Rolling out" checked> Rolling out</label>
      <label><input type="checkbox" class="flt-status" value="In development" checked> In development</label>
    </div>

    <div class="group">
      <h4>Technology</h4>
      <input id="flt-tech" placeholder="e.g., Teams, SharePoint, Intune" style="width:260px;padding:6px 8px;border:1px solid #d1d5db;border-radius:8px">
    </div>

    <div class="group">
      <h4>GA Window</h4>
      <label><input type="radio" name="gaMode" value="month" checked> Exact Month</label>
      <label class="toggle"><input type="radio" name="gaMode" value="quarter"> Entire Quarter</label>
    </div>

    <div class="actions">
      <button id="btn-apply" class="primary">Apply</button>
      <button id="btn-clear">Clear</button>
    </div>
  </div>
</header>

<main>
  <section id="cards" class="cards">
    $($cards -join "`n")
  </section>
  <div id="empty" class="empty" style="display:none;">
    No items match the current filters. Try clearing one or more filters.
  </div>
</main>

<script>
(function(){
  "use strict";
  function norm(s){ return (s||"").toLowerCase(); }
  function split(p){ return (p||"").split("|").map(function(x){ return x.trim(); }).filter(Boolean); }

  var cards = Array.prototype.slice.call(document.querySelectorAll(".card"));

  function selected(listSel){
    var els = Array.prototype.slice.call(document.querySelectorAll(listSel+":checked"));
    return els.map(function(e){ return e.value; });
  }

  function applyFilters(){
    try{
      var clouds = selected(".flt-cloud");
      var statuses = selected(".flt-status");
      var techQ = norm(document.getElementById("flt-tech").value);
      var gaMode = (document.querySelector('input[name="gaMode"]:checked')||{}).value || "month";

      // Cloud logic: if none OR all selected, treat as "no cloud filter"
      var cloudFilterOff = (clouds.length===0) || (clouds.length===4);

      var shown = 0;
      cards.forEach(function(c){
        var ok = true;

        // status
        var st = c.dataset.status || "";
        if (statuses.length>0 && statuses.indexOf(st)===-1) ok=false;

        // cloud
        if (ok && !cloudFilterOff){
          var itemClouds = split(c.dataset.clouds).map(function(x){ return x.toLowerCase(); });
          var wanted = clouds.map(function(x){
            // normalize a few variants to match server normalization
            var t = x.toLowerCase();
            if (t==="worldwide" || t.indexOf("worldwide")===0) t = "worldwide (standard multi-tenant)";
            return t;
          });
          var hit = itemClouds.some(function(ic){ return wanted.indexOf(ic)>=0; });
          if(!hit) ok=false;
        }

        // technology text (checks title + products list string)
        if (ok && techQ){
          var hay = (c.querySelector("h3").textContent || "") + " " +
                    (c.dataset.products || "");
          if (norm(hay).indexOf(techQ)===-1) ok=false;
        }

        // GA mode (purely client-side visual filter)
        if (ok){
          var mon = c.dataset.gamonth || "";
          var qtr = c.dataset.gaquarter || "";
          if (gaMode==="month"){
            // require the item to have a month value
            if (!mon) ok=false;
          }else{
            // quarter mode requires a quarter string
            if (!qtr) ok=false;
          }
        }

        c.style.display = ok ? "" : "none";
        if (ok) shown++;
      });

      document.getElementById("empty").style.display = shown ? "none" : "";
    }catch(e){
      console.error("Filter error", e);
      // do not blank the screen on errors
      document.getElementById("empty").style.display = "";
    }
  }

  document.getElementById("btn-apply").addEventListener("click", applyFilters);
  document.getElementById("btn-clear").addEventListener("click", function(){
    Array.prototype.slice.call(document.querySelectorAll(".flt-cloud,.flt-status")).forEach(function(cb){ cb.checked = false; });
    document.querySelector('input[name="gaMode"][value="month"]').checked = true;
    document.getElementById("flt-tech").value = "";
    applyFilters();
  });

  // Also apply on quick changes to make it feel alive
  Array.prototype.slice.call(document.querySelectorAll(".flt-cloud,.flt-status,input[name='gaMode']")).forEach(function(el){
    el.addEventListener("change", applyFilters);
  });
  document.getElementById("flt-tech").addEventListener("keydown", function(ev){ if (ev.key==="Enter") applyFilters(); });

  // initial pass
  applyFilters();
})();
</script>
</html>
"@

  $html
}

#endregion

#region Public cmdlets

function Connect-GraphCertificate {
  [CmdletBinding()]
  param(
    [string] $TenantId,
    [string] $ClientId,
    [string] $CertificateThumbprint,
    [string] $GraphProfile = 'v1.0'
  )
  Write-Verbose "Graph plumbing placeholder ready (PS7)."
}

function Get-M365Roadmap {
  [CmdletBinding()]
  param(
    [string[]] $Products,
    [string[]] $Platforms,
    [string[]] $CloudInstances,
    [string[]] $ReleasePhase,
    [string[]] $Status,
    [string]   $Text,

    [datetime] $UpdatedSince,
    [datetime] $CreatedSince,

    [switch] $NextMonth,
    [switch] $GAQuarter,       # with -NextMonth, banner toggles "Exact Month" vs "Entire Quarter"
    [switch] $ApplyGAWindow,   # if present, server-side filters by GAFrom/GATo

    [ValidateSet('Cloud','Technology','Status','None')]
    [string] $GroupBy = 'Cloud',

    [int] $Top = 200,
    [string] $Title = 'Roadmap Briefing',
    [string] $OutputPath = $(Join-Path $PWD ("Roadmap_Briefing_{0:yyyyMMdd-HHmmss}.html"))
  )

  Write-Verbose "Begin Get-M365Roadmap"

  $uri = 'https://www.microsoft.com/releasecommunications/api/v1/m365'
  Write-Verbose "Fetching Roadmap: $uri"
  $raw = Invoke-RestMethod -Uri $uri
  $items = if ($raw.PSObject.Properties['features']) { @($raw.features) } else { @($raw) }
  Write-Verbose "Items fetched: $($items.Count)"

  # GA window (for subtitle + optional server filter)
  $gaFrom = $null; $gaTo = $null; $banner = (Get-Date -Format 'yyyy-MM-dd')
  if ($NextMonth) {
    $now = Get-Date
    $start = Get-Date -Year $now.Year -Month ($now.Month % 12 + 1) -Day 1
    $end   = ($start.AddMonths(1).AddDays(-1)).Date
    if ($GAQuarter) {
      $q = [math]::Ceiling($start.Month/3)
      $startQ = Get-Date -Year $start.Year -Month (1 + ($q-1)*3) -Day 1
      $endQ   = ($startQ.AddMonths(3).AddDays(-1)).Date
      $gaFrom = $startQ; $gaTo = $endQ
      $banner = "{0:d}..{1:d} (planned months via GA quarter)" -f $gaFrom, $gaTo
    } else {
      $gaFrom = $start; $gaTo = $end
      $banner = "{0:d}..{1:d} (planned months via GA text)" -f $gaFrom, $gaTo
    }
    Write-Verbose ("GA window: {0}" -f $banner)
  }

  # Build filter args (drop empty)
  $filter = @{
    Items          = $items
    Products       = $Products
    Platforms      = $Platforms
    CloudInstances = $CloudInstances
    ReleasePhase   = $ReleasePhase
    Status         = $Status
    Text           = $Text
    UpdatedSince   = $UpdatedSince
    CreatedSince   = $CreatedSince
  }
  if ($ApplyGAWindow -and $gaFrom) { $filter.GAFrom = $gaFrom; $filter.GATo = $gaTo }

  foreach($k in @('Products','Platforms','CloudInstances','ReleasePhase','Status','Text',
                  'UpdatedSince','CreatedSince','GAFrom','GATo')){
    if ($filter.ContainsKey($k)) {
      $v = $filter[$k]
      if ($null -eq $v -or ($v -is [array] -and $v.Count -eq 0) -or
         ($v -is [string] -and [string]::IsNullOrWhiteSpace($v))) {
        $null = $filter.Remove($k)
      }
    }
  }

  $items = Filter-RoadmapItems @filter

  # Sort by modified (desc)
  $sortable = foreach($it in $items){
    $val = ConvertFrom-RoadmapDate $it.modified
    [pscustomobject]@{ key=$val; it=$it }
  }
  $items = @($sortable | Sort-Object key -Descending | ForEach-Object { $_.it })
  if ($Top -gt 0 -and $items.Count -gt $Top) { $items = @($items | Select-Object -First $Top) }

  Write-Verbose "Items after filter: $($items.Count)"

  $subtitle = $banner
  $html = New-RoadmapHtml -Items $items -Title $Title -Subtitle $subtitle -GroupBy $GroupBy
  Set-Content -Path $OutputPath -Value $html -Encoding UTF8
  Write-Host "Roadmap briefing written to: $OutputPath"
  return $OutputPath
}

Export-ModuleMember -Function Get-M365Roadmap,Connect-GraphCertificate

#endregion
